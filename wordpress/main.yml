# -*- coding: utf-8; indent-tabs-mode: nil; tab-width: 2; -*-

---
- name: Start VM instances
  connection: local
  hosts: localhost
  tasks:
    - name: Start VM instances
      waldur_os_add_instance:
        access_token: "{{ access_token }}"
        api_url: "{{ api_url }}"
        data_volume_size: 1
        flavor: m1.xsmall
        floating_ip: auto
        image: CentOS 7 x86_64
        name: Wordpress on Waldur
        project: "{{ project_uuid }}"
        provider: "{{ provider_uuid }}"
        security_groups:
          - default
          - ping
          - ssh
          - web
        ssh_key: "{{ public_key_uuid }}"
        subnet: "{{ subnet_uuid }}"
        system_volume_size: 10
        tags: "{{ tags }}"
        wait: true
      register: vm_instance

    - name: Set instance facts
      set_fact:
        public_ip: "{{ vm_instance.instance.external_ips.0 }}"
      when: not ansible_check_mode

    - name: Add instance to dynamic inventory
      add_host:
        ansible_ssh_private_key_file: "{{ private_key_path }}"
        ansible_ssh_user: centos
        groups: created_vm_instances
        hostname: "{{ public_ip }}"
      when: not ansible_check_mode

    - name: Get SSH public key data
      uri:
        headers:
          Authorization: "Token {{ access_token }}"
        url: "{{ api_url }}keys/{{ user_key_uuid }}/"
      register: key_data
      when: not ansible_check_mode

    - name: Set SSH public key fact
      set_fact:
        public_key: "{{ key_data.json.public_key }}"
      when: not ansible_check_mode

    - name: Wait for instance to respond to SSH
      wait_for:
        delay: 10
        host: "{{ public_ip }}"
        port: 22
      when: not ansible_check_mode


- name: Add SSH public key to instance authorized keys
  become: yes
  hosts: created_vm_instances
  tasks:
    - name: Add SSH public key to instance authorized keys
      authorized_key:
        key: "{{ hostvars.localhost.public_key }}"
        state: present
        user: centos


- name: Install and configure WordPress
  hosts: created_vm_instances
  become: yes
  tasks:
    - name: Enable package repositories
      package:
        name: epel-release

    - name: Install packages
      package:
        name: "{{ item }}"
      with_items:
        - mariadb-server
        - MySQL-python
        - wordpress

    - name: Configure Apache HTTPd
      lineinfile:
        backrefs: yes
        line: "    Require all granted"
        path: /etc/httpd/conf.d/wordpress.conf
        regexp: "^    Require local$"
      notify: httpd_restart

    - name: Configure WordPress
      lineinfile:
        backrefs: yes
        line: "{{ item.replace }}"
        path: /etc/wordpress/wp-config.php
        regexp: "{{ item.match }}"
      with_items:
        - match: "database_name_here"
          replace: "define('DB_NAME', 'wordpress');"
        - match: "password_here"
          replace: "define('DB_PASSWORD', 'wordpress');"
        - match: "username_here"
          replace: "define('DB_USER', 'wordpress');"

    - name: Enable and start services
      service:
        enabled: yes
        name: "{{ item }}"
        state: started
      with_items:
        - mariadb
        - httpd

    - name: Create WordPress database
      mysql_db:
        name: wordpress

    - name: Create WordPress database user
      mysql_user:
        name: wordpress
        password: wordpress
        priv: wordpress.*:ALL

  handlers:
    - name: httpd_restart
      service:
        name: httpd
        state: restarted
